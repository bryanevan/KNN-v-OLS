{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import warnings\n",
    "\n",
    "from IPython.display import display\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns; sns.set()\n",
    "import sklearn\n",
    "from sklearn import linear_model\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.api as sm\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "%matplotlib inline\n",
    "pd.options.display.float_format = '{:.3f}'.format\n",
    "warnings.filterwarnings(\n",
    "    action=\"ignore\",\n",
    "    module=\"scipy\",\n",
    "    message=\"^internal gelsd\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "PATH=('/Users/bryanevan/desktop/calidata.csv')\n",
    "df=pd.read_csv(PATH)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['City',\n",
       " 'Population',\n",
       " 'Violent crime',\n",
       " 'Murder and nonnegligent manslaughter',\n",
       " 'Rape(revised definition)1',\n",
       " 'Rape(legacy definition)2',\n",
       " 'Robbery',\n",
       " 'Aggravated assault',\n",
       " 'Property crime',\n",
       " 'Burglary',\n",
       " 'Larceny-theft',\n",
       " 'Motor vehicle theft',\n",
       " 'Arson',\n",
       " 'Unnamed: 13']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "names=[i for i in list(df)]\n",
    "names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=df.drop(['Unnamed: 13'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=df1.drop(['Rape(revised definition)1'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=df1.rename(columns={'Violent crime': 'Violent_crime', 'Murder and nonnegligent manslaughter': 'Murder_manslaughter', 'Rape(legacy definition)2': 'Rape', 'Aggravated assault': 'Aggravated_assault', 'Property crime': 'Property_crime', 'Larceny-theft': 'Theft', 'Motor vehicle theft': 'GTA'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Population=df1.Population.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Violent_crime=df1.Violent_crime.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Robbery=df1.Robbery.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Aggravated_assault=df1.Aggravated_assault.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Property_crime=df1.Property_crime.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Burglary=df1.Burglary.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Theft=df1.Theft.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.GTA=df1.GTA.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.Arson=df1.Arson.apply(lambda x: x.replace(',', '')).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df1[['Robbery']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### OLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept: \n",
      " [814.7377932]\n",
      "Coefficients: \n",
      " [[10.2753438]]\n",
      "\n",
      "R-squared:\n",
      "0.8723390872425194\n",
      "RMSE: 2217.8497\n",
      "MAE: 980.9548\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "X = df2\n",
    "y = df1['Property_crime'].values.reshape(-1,1)\n",
    "regr = LinearRegression()\n",
    "regr.fit(X, y)\n",
    "regr.score(X, y)\n",
    "print('Intercept: \\n', regr.intercept_)\n",
    "print('Coefficients: \\n', regr.coef_)\n",
    "print('\\nR-squared:')\n",
    "print(regr.score(X, y))\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y)\n",
    "regr.fit(X_train, y_train)\n",
    "y_pred=regr.predict(X_test)\n",
    "\n",
    "#RMSE\n",
    "from sklearn.metrics import mean_squared_error\n",
    "lin_mse = mean_squared_error(y_test, y_pred)\n",
    "lin_rmse = np.sqrt(lin_mse)\n",
    "print('RMSE: %.4f' % lin_rmse)\n",
    "#MAE\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "lin_mae = mean_absolute_error(y_test, y_pred)\n",
    "print('MAE: %.4f' % lin_mae)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.sandbox.regression.predstd import wls_prediction_std\n",
    "linform = 'Property_crime ~ GTA+Burglary+Robbery+Population'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "lm=smf.ols(formula=linform, data=df1).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:         Property_crime   R-squared:                       0.973\n",
      "Model:                            OLS   Adj. R-squared:                  0.973\n",
      "Method:                 Least Squares   F-statistic:                     4133.\n",
      "Date:                Fri, 28 Dec 2018   Prob (F-statistic):               0.00\n",
      "Time:                        13:41:56   Log-Likelihood:                -3792.7\n",
      "No. Observations:                 462   AIC:                             7595.\n",
      "Df Residuals:                     457   BIC:                             7616.\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     60.6256     47.323      1.281      0.201     -32.373     153.624\n",
      "GTA            0.5745      0.170      3.378      0.001       0.240       0.909\n",
      "Burglary       2.3639      0.160     14.741      0.000       2.049       2.679\n",
      "Robbery        2.8041      0.212     13.223      0.000       2.387       3.221\n",
      "Population     0.0056      0.001     10.153      0.000       0.004       0.007\n",
      "==============================================================================\n",
      "Omnibus:                      713.060   Durbin-Watson:                   2.015\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           478993.637\n",
      "Skew:                           7.996   Prob(JB):                         0.00\n",
      "Kurtosis:                     159.930   Cond. No.                     2.48e+05\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.48e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "                 0       1\n",
      "Intercept  -32.373 153.624\n",
      "GTA          0.240   0.909\n",
      "Burglary     2.049   2.679\n",
      "Robbery      2.387   3.221\n",
      "Population   0.004   0.007\n"
     ]
    }
   ],
   "source": [
    "print(lm.summary())\n",
    "confidence=lm.conf_int()\n",
    "print(confidence)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### CV\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.68811174,  0.70449031,  0.5088914 ,  0.54667968,  0.63295459,\n",
       "        0.53171782,  0.49410107,  0.98659372,  0.71436594, -0.84912597,\n",
       "        0.74702989,  0.83488384,  0.53798554,  0.86834712,  0.52135142])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "cross_val_score(regr, X, y, cv=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import neighbors\n",
    "# Build our model.\n",
    "knn = neighbors.KNeighborsRegressor(n_neighbors=10)\n",
    "X = df2\n",
    "Y = df1.Property_crime\n",
    "knn.fit(X, Y)\n",
    "T = np.arange(0, 50, 0.1)[:, np.newaxis]\n",
    "Y_ = knn.predict(T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Weights\n",
    "knn_w = neighbors.KNeighborsRegressor(n_neighbors=5, weights='distance')\n",
    "knn_w.fit(X, Y)\n",
    "\n",
    "Y_w = knn_w.predict(T)\n",
    "\n",
    "plt.scatter(X, Y, c='k', label='data')\n",
    "plt.plot(T, Y_w, c='g', label='prediction')\n",
    "plt.legend()\n",
    "plt.title('K=5, Weighted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unweighted Accuracy: 0.70 (+/- 0.31)\n",
      "Weighted Accuracy: 0.75 (+/- 0.19)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "score = cross_val_score(knn, X, Y, cv=5)\n",
    "print(\"Unweighted Accuracy: %0.2f (+/- %0.2f)\" % (score.mean(), score.std() * 2))\n",
    "score_w = cross_val_score(knn_w, X, Y, cv=5)\n",
    "print(\"Weighted Accuracy: %0.2f (+/- %0.2f)\" % (score_w.mean(), score_w.std() * 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Looking at OLS first, there's some apparent issues. RMSE strikes me as rather high, so I'm not greatly excited about using an error based approach unless I could calibrate the model enough to reach a satisfactory RMSE.  F-critical is 0.00; as are all coefficient P-values, and R^2 is in the 97% range. This model seems to be overfitting. This conclusion may be further explained by the fact that the confidence intervals of each respective coefficient are very tight. Cross-validation yielded unsastisfactory results, as folds, out of 15, show sporatic change and not many results near the desired 89% range; thus, we are overfitting at a variable amount.\n",
    "\n",
    "Now let us look at KNN. At this point, we're only using a K-fold CV to understand its performance when considering weighted and unweighted metrics. The unweighted metrics show higher variance than in the weighted model, and the weighted model does show a 5% increase in predicting power. The decrease in variance in the weighted model is exciting and leads me to determine that KNN with weights is looking better at this point than OLS; of course, this presupposes that we pick KNN regression in favor of OLS without observing any possible changes in OLS after refitting. \n",
    "\n",
    "Should this analysis hold, it would suggest that none of the indepedent variables have disproportionately large variance to confer to the model, both individually or by mutual interaction. If this is indeed the case, it would seem that KNN truly has its place in this instance. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
